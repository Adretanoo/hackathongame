package com.preachers.hashing.domain;

import com.preachers.hashing.ui.MainMenu;
import com.preachers.hashing.utils.Euclid;
import com.preachers.hashing.utils.Utils;
import java.math.BigInteger;

public class BlockProcessor {

    public static byte[][] createBlocks(byte[] inputArray, int messageLength) {
        int blockSize = 32; // 256 –±—ñ—Ç—ñ–≤ = 32 –±–∞–π—Ç–∏
        int totalBlocks = (inputArray.length + blockSize - 1) / blockSize;
        if ((inputArray.length % blockSize) + 4 > blockSize) {
            totalBlocks++; // –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –±–ª–æ–∫, —è–∫—â–æ –º—ñ—Å—Ü–µ –¥–ª—è –¥–æ–≤–∂–∏–Ω–∏ –Ω–µ –≤–º—ñ—â—É—î—Ç—å—Å—è
        }

        if (MainMenu.loggingEnabled) {
            System.out.println("üîπ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –±–ª–æ–∫—ñ–≤: " + totalBlocks);
        }

        byte[][] blocks = new byte[totalBlocks][blockSize];

        for (int blockIndex = 0; blockIndex < totalBlocks; blockIndex++) {
            byte[] block = new byte[blockSize];

            // –ö–æ–ø—ñ—é—î–º–æ –¥–∞–Ω—ñ —É –ø–æ—Ç–æ—á–Ω–∏–π –±–ª–æ–∫
            int start = blockIndex * blockSize;
            int length = Math.min(inputArray.length - start, blockSize);
            System.arraycopy(inputArray, start, block, 0, length);

            if (MainMenu.loggingEnabled) {
                System.out.println("üîπ –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –±–ª–æ–∫ A:");
                Utils.printBlock(block);
            }

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –±–ª–æ–∫
            blocks[blockIndex] = block;
        }

        return blocks;
    }

    public static byte[][] applyRounds(byte[][] blocks, int rounds, int messageBitLength) {
        int blockSize = blocks[0].length;

        for (int round = 0; round < rounds; round++) {
            if (MainMenu.loggingEnabled) {
                System.out.println("=== üîÑ –†–∞—É–Ω–¥ –æ–±—Ä–æ–±–∫–∏: " + (round + 1) + " ===");
            }

            for (int blockIndex = 0; blockIndex < blocks.length; blockIndex++) {
                byte[] block = blocks[blockIndex];

                // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–æ–∑—à–∏—Ä–µ–Ω–æ—ó –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏
                byte[] extendedConstant = Utils.generateExtendedConstant((char) (round % 10 + '0'), blockSize, messageBitLength);
                if (MainMenu.loggingEnabled) {
                    System.out.println("\uD83D\uDD0D –†–æ–∑—à–∏—Ä–µ–Ω–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ B –¥–ª—è –±–ª–æ–∫—É " + (blockIndex + 1) + ":");
                    Utils.printBlock(extendedConstant);
                }

                // –§–æ—Ä–º—É–ª–∞: A XOR B
                for (int i = 0; i < blockSize; i++) {
                    block[i] ^= extendedConstant[i];
                }
                if (MainMenu.loggingEnabled) {
                    System.out.println("\uD83D\uDD0D –ü—ñ—Å–ª—è XOR: A XOR B –¥–ª—è –±–ª–æ–∫—É " + (blockIndex + 1) + ":");
                    Utils.printBlock(block);
                }

                // –ü–æ–±—ñ—Ç–æ–≤–µ –∑–º—ñ—â–µ–Ω–Ω—è (—Ñ—ñ–∫—Å–æ–≤–∞–Ω–µ)
                for (int i = 0; i < blockSize; i++) {
                    block[i] = (byte) ((block[i] << 3) | ((block[i] & 0xFF) >>> (8 - 3)));
                }
                if (MainMenu.loggingEnabled) {
                    System.out.println("\uD83D\uDD0D –ü—ñ—Å–ª—è –∑–º—ñ—â–µ–Ω–Ω—è –≤–ª—ñ–≤–æ –¥–ª—è –±–ª–æ–∫—É " + (blockIndex + 1) + ":");
                    Utils.printBlock(block);
                }

                // –û–±—á–∏—Å–ª–µ–Ω–Ω—è –ù–°–ö –º—ñ–∂ –±–ª–æ–∫–æ–º —Ç–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–æ—é
                BigInteger blockValue = new BigInteger(1, block);
                BigInteger constantValue = new BigInteger(1, extendedConstant);
                BigInteger lcmValue = Euclid.lcm(blockValue, constantValue);
                if (MainMenu.loggingEnabled) {
                    System.out.println("\uD83D\uDD0D –ù–°–ö(A, B) –¥–ª—è –±–ª–æ–∫—É " + (blockIndex + 1) + ": " + lcmValue.toString(2));
                }

                // –§–æ—Ä–º—É–ª–∞: (A XOR B) XOR –ù–°–ö(A, B)
                byte[] lcmBytes = lcmValue.toByteArray();
                for (int i = 0; i < blockSize; i++) {
                    block[i] ^= lcmBytes[i % lcmBytes.length];
                }
                if (MainMenu.loggingEnabled) {
                    System.out.println("\uD83D\uDD0D –ü—ñ—Å–ª—è XOR —ñ–∑ –ù–°–ö –¥–ª—è –±–ª–æ–∫—É " + (blockIndex + 1) + ":");
                    Utils.printBlock(block);
                }

                // –ü–æ–±—ñ—Ç–æ–≤–µ –∑–º—ñ—â–µ–Ω–Ω—è (–∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ —Ä–∞—É–Ω–¥—É)
                int shiftVariable = (round % 8) + 1;
                for (int i = 0; i < blockSize; i++) {
                    block[i] = (byte) ((block[i] >>> shiftVariable) | (block[i] << (8 - shiftVariable)));
                }
                if (MainMenu.loggingEnabled) {
                    System.out.println("\uD83D\uDD0D –ü—ñ—Å–ª—è –∑–º—ñ—â–µ–Ω–Ω—è –≤–ø—Ä–∞–≤–æ –¥–ª—è –±–ª–æ–∫—É " + (blockIndex + 1) + ":");
                    Utils.printBlock(block);
                }

                // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–ª–æ–∫—É –ø—ñ—Å–ª—è —Ä–∞—É–Ω–¥—É
                blocks[blockIndex] = block;
            }
        }

        return blocks;
    }

    public static byte[] finalizeBlocks(byte[][] blocks) {
        int blockSize = blocks[0].length;
        byte[] result = new byte[blockSize];

        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—á–∞—Ç–∫–æ–≤–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏
        for (int i = 0; i < blockSize; i++) {
            result[i] = 0;
        }

        // –û–±'—î–¥–Ω—É—î–º–æ –≤—Å—ñ –±–ª–æ–∫–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é XOR
        for (byte[] block : blocks) {
            for (int i = 0; i < blockSize; i++) {
                result[i] ^= block[i];
            }
        }

        // –î–æ–¥–∞—Ç–∫–æ–≤–µ –ø–æ–±—ñ—Ç–æ–≤–µ –∑–º—ñ—â–µ–Ω–Ω—è –¥–ª—è —Ñ—ñ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—ó
        int shiftFinal = 5; // –§—ñ–∫—Å–æ–≤–∞–Ω–µ –∑–º—ñ—â–µ–Ω–Ω—è –¥–ª—è —Ñ—ñ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—ó
        for (int i = 0; i < blockSize; i++) {
            result[i] = (byte) ((result[i] << shiftFinal) | ((result[i] & 0xFF) >>> (8 - shiftFinal)));
        }

        return result;
    }
}

